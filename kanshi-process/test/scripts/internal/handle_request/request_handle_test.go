package handle_request

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"kanshi-process/configs"
	handlerequest "kanshi-process/internal/handle_request"
	"kanshi-process/model"
	"testing"
)

func Test_FormatRequest(t *testing.T) {
	tests := []struct {
		name   string
		args   configs.TickSystem
		expect configs.Request
		err    error
	}{
		{
			name: "Kinou invalid",
			args: configs.TickSystem{
				RequestKinou:     model.EmptyString,
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid kinou"),
		},
		{
			name: "Kinou does not equal 01 or 05",
			args: configs.TickSystem{
				RequestKinou:     "09",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid kinou"),
		},
		{
			name: "KanriID invalid",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_IDABC",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid kanri id"),
		},
		{
			name: "KanriID length is 4, add 2 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"01",
				"KNR_  ",
				"Tick_Test                               ",
				"2101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				model.EmptyString,
				model.EmptyString,
				model.EmptyString,
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "UserID invalid",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test                                ",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid user id"),
		},
		{
			name: "UserID length is 9, add 31 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"01",
				"KNR_ID",
				"Tick_Test                               ",
				"2101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				model.EmptyString,
				model.EmptyString,
				model.EmptyString,
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "Syubetu invalid",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "210",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid syubetu"),
		},
		{
			name: "Quote code invalid",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4                                     ",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid quote code"),
		},
		{
			name: "Quote Code length is 6, add 36 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"01",
				"KNR_ID",
				"Tick_Test                               ",
				"2101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				model.EmptyString,
				model.EmptyString,
				model.EmptyString,
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "From date invalid",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "000000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid from date"),
		},
		{
			name: "From date length is 6, add 2 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "000000",
				RequestToDate:    "00000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"01",
				"KNR_ID",
				"Tick_Test                               ",
				"2101",
				"XJPY/4                                    ",
				"000000  ",
				"00000000",
				model.EmptyString,
				model.EmptyString,
				model.EmptyString,
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "To date invalid",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "000000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid to date"),
		},
		{
			name: "To date length is 6, add 2 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "01",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "2101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "000000",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"01",
				"KNR_ID",
				"Tick_Test                               ",
				"2101",
				"XJPY/4                                    ",
				"00000000",
				"000000  ",
				model.EmptyString,
				model.EmptyString,
				model.EmptyString,
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "From time invalid",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "10000",
				RequestToTime:    "1500",
				RequestYobi:      "",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid from time"),
		},
		{
			name: "From time length is 3, add 1 space characters before it",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "100",
				RequestToTime:    "1500",
				RequestYobi:      "",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"05",
				"KNR_ID",
				"Tick_Test                               ",
				"4101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				" 100",
				"1500",
				"        ",
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "To time invalid",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "15000",
				RequestYobi:      "",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid to time"),
		},
		{
			name: "To time length is 3, add 1 space characters before it",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "150",
				RequestYobi:      "",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"05",
				"KNR_ID",
				"Tick_Test                               ",
				"4101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				"1000",
				" 150",
				"        ",
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "Yobi invalid",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "         ",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid yobi"),
		},
		{
			name: "Yobi length is 4, add 4 space characters before it",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "1111",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"05",
				"KNR_ID",
				"Tick_Test                               ",
				"4101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				"1000",
				"1500",
				"1111    ",
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "Funasi invalid",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "        ",
				RequestFunasi:    "100",
				RequestKikan:     "1",
			},
			expect: nil,
			err:    fmt.Errorf("invalid funasi"),
		},
		{
			name: "Funasi length is 1, add 1 space characters before it",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "11111111",
				RequestFunasi:    "1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"05",
				"KNR_ID",
				"Tick_Test                               ",
				"4101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				"1000",
				"1500",
				"11111111",
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "Kikan invalid",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "        ",
				RequestFunasi:    "10",
				RequestKikan:     "11111",
			},
			expect: nil,
			err:    fmt.Errorf("invalid kikan"),
		},
		{
			name: "Kikan length is 1, add 3 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "11111111",
				RequestFunasi:    " 1",
				RequestKikan:     "1",
			},
			expect: configs.Request{
				"05",
				"KNR_ID",
				"Tick_Test                               ",
				"4101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				"1000",
				"1500",
				"11111111",
				" 1",
				"1   ",
				"   0",
				model.EmptyString,
			},
			err: nil,
		},
		{
			name: "Element length is 1, add 3 space characters after it",
			args: configs.TickSystem{
				RequestKinou:     "05",
				RequestKanriID:   "KNR_ID",
				RequestUserID:    "Tick_Test",
				RequestSyubetu:   "4101",
				RequestQuoteCode: "XJPY/4",
				RequestFromDate:  "00000000",
				RequestToDate:    "00000000",
				RequestFromTime:  "1000",
				RequestToTime:    "1500",
				RequestYobi:      "11111111",
				RequestFunasi:    " 1",
				RequestKikan:     "1",
				RequestElements:  "\r\n",
			},
			expect: configs.Request{
				"05",
				"KNR_ID",
				"Tick_Test                               ",
				"4101",
				"XJPY/4                                    ",
				"00000000",
				"00000000",
				"1000",
				"1500",
				"11111111",
				" 1",
				"1   ",
				"   2",
				"\r\n",
			},
			err: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result, err := handlerequest.FormatRequest(&tt.args)
			if err != nil {
				assert.Equal(t, tt.err.Error(), err.Error())
			} else {
				assert.Equal(t, len(tt.expect), len(result))
				for index := range tt.expect {
					assert.Equal(t, tt.expect[index], result[index])
				}
			}
		})
	}
}
